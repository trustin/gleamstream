import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'application'

mainClassName = "kr.motd.gleamstream.Main"
applicationDefaultJvmArgs = [
        '-DGleamStream',
        '-server',
        '-Xmx512m',
        '-XX:+UseG1GC',
        '-XX:+AggressiveOpts'
]

ext.versionOf = { project.property("${it}.version") }

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    runtime
    all*.exclude module: 'javacpp-presets'
}

dependencies {
    // Bouncy Castle
    compile "org.bouncycastle:bcpkix-jdk15on:${versionOf('bouncycastle')}"
    // FastUtil
    compile "it.unimi.dsi:fastutil:${versionOf('fastutil')}"
    // FFmpeg
    compile "org.bytedeco.javacpp-presets:ffmpeg:${versionOf('ffmpeg')}"
    [ 'linux-x86_64', 'windows-x86', 'windows-x86_64', 'macosx-x86_64' ].each {
        runtime "org.bytedeco.javacpp-presets:ffmpeg:${versionOf('ffmpeg')}:$it"
    }
    // Guava
    compile "com.google.guava:guava:${versionOf('guava')}"
    // Jackson
    [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {
        compile "com.fasterxml.jackson.core:$it:${versionOf('jackson')}"
    }
    // JavaCPP
    compile "org.bytedeco:javacpp:${versionOf('javacpp')}"
    // jCommander
    compile "com.beust:jcommander:${versionOf('jcommander')}"
    // JCTools
    compile "org.jctools:jctools-core:${versionOf('jctools')}"
    // Logback
    compile "ch.qos.logback:logback-classic:${versionOf('logback')}"
    // LWJGL
    [ 'lwjgl', 'lwjgl-glfw', 'lwjgl-jemalloc', 'lwjgl-openal', 'lwjgl-opengl',
      'lwjgl-stb', 'lwjgl-nuklear', 'lwjgl-tinyfd' ].each { artifactId ->
        compile "org.lwjgl:${artifactId}:${versionOf('lwjgl')}"
        if (!(artifactId in [ 'lwjgl-opengl' ])) {
            [ 'linux', 'windows', 'macos' ].each { platform ->
                runtime "org.lwjgl:$artifactId:${versionOf('lwjgl')}:natives-$platform"
            }
        }
    }
    // OkHttp2
    compile "com.squareup.okhttp:okhttp:${versionOf('okhttp')}"
    // OkIo
    compile "com.squareup.okio:okio:${versionOf('okio')}"
    // os-maven-plugin
    compile("kr.motd.maven:os-maven-plugin:${versionOf('os-maven-plugin')}") {
        exclude module: 'maven-plugin-api'
        exclude module: 'maven-core'
        exclude module: 'maven-plugin-annotations'
        exclude module: 'plexus-utils'
        exclude module: 'ui'
    }
    // SLF4J
    compile "org.slf4j:slf4j-api:${versionOf('slf4j')}"
    // TinyRTSP
    compile files('lib/tinyrtsp.jar')
    // XPP3
    compile("org.ogce:xpp3:${versionOf('xpp3')}") {
        exclude module: 'junit'
        exclude module: 'jakarta-regexp'
    }
}

// Require Java 8 to build the project.
tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
    options.warnings = false
    options.debug = true
}

run {
    if (project.hasProperty('appArgs')) {
        args appArgs.split('[ \t]+')
    }

    jvmArgs applicationDefaultJvmArgs
    if (Os.isFamily(Os.FAMILY_MAC)) {
        jvmArgs '-XstartOnFirstThread'
    }
}

startScripts {
    unixStartScriptGenerator.template =
            resources.text.fromFile("$project.projectDir/src/build/unixStartScript.txt")
}

distTar {
    compression = Compression.GZIP
    extension = 'tar.gz'
}
